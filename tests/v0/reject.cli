#!/usr/bin/env clitest --v0

reject {
    ! Hello, world!
    sequence {
        ! a
        ! b
        ! c
    }
}


# if true {
#     # Rejects are global, this should escape the if block
#     reject {
#         ! Something else
#     }
# }

$ printf "Hello, world!\n"
%EXPECT_FAILURE
*

# This doesn't work yet because we don't treat preamble patterns as commands.

# $ printf "Something else\n"
# %EXPECT_FAILURE
# *

$ printf "a\nb\nnot c\n"
*

$ printf "a\nb\nc\n"
%EXPECT_FAILURE
*

$ printf "fails"
%EXPECT_FAILURE
reject {
    ! fails
}
*

# The previous rejection was scoped to that command
$ printf "fails"
! fails

# Test complex lookahead
$ printf "hello: a (ok)\nhello: b (reject)\nhello: c (ok)\n"
%EXPECT_FAILURE
reject {
    ? hello: (?!(a|c))\w \(%{DATA}\)
}
*

$ printf "hello: a (ok)\nhello: a (ok)\nhello: c (ok)\n"
reject {
    ? hello: (?!(a|c))\w (%{DATA})
}
*

# Test equivalent in not patterns
$ printf "hello: a (ok)\nhello: b (reject)\nhello: c (ok)\n"
%EXPECT_FAILURE
reject {
    sequence {
        not {
            choice {
                ? hello: a \(%{DATA}\)
                ? hello: c \(%{DATA}\)
            }
        }
        ? hello: \w \(%{DATA}\)
    }
}
*

# Test equivalent in not patterns
$ printf "hello: a (ok)\nhello: a (ok)\nhello: c (ok)\n"
reject {
    sequence {
        not {
            choice {
                ? hello: a \(%{DATA}\)
                ? hello: c \(%{DATA}\)
            }
        }
        ? hello: \w \(%{DATA}\)
    }
}
*
